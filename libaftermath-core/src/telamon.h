/**
 * Author: Andi Drebes <andi@drebesium.org>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as published
 * by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301,
 * USA.
 */

#ifndef AM_TELAMON_H
#define AM_TELAMON_H

#include <aftermath/core/dfs.h>
#include <aftermath/core/in_memory.h>
#include <aftermath/core/qsort.h>
#include <stdlib.h>

enum am_telamon_candidate_flags {
	AM_TELAMON_CANDIDATE_FLAG_INTERNAL_NODE = (1 << 0),
	AM_TELAMON_CANDIDATE_FLAG_ROLLOUT_NODE = (1 << 1),
	AM_TELAMON_CANDIDATE_FLAG_IMPLEMENTATION = (1 << 2),
	AM_TELAMON_CANDIDATE_FLAG_DEADEND = (1 << 3),
	AM_TELAMON_CANDIDATE_FLAG_PERFMODEL_BOUND_VALID = (1 << 4),
	AM_TELAMON_CANDIDATE_FLAG_SCORE_VALID = (1 << 5),
};

enum am_telamon_candidate_evaluation_flags {
	AM_TELAMON_CANDIDATE_EVALUATION_FLAG_SCORE_VALID = (1 << 0)
};

enum am_telamon_candidate_type {
	/* Node in a part that is not yet visible */
	AM_TELAMON_CANDIDATE_TYPE_UNKNOWN_NODE,

	/* Node known, but hasn't been explored yet */
	AM_TELAMON_CANDIDATE_TYPE_UNEXPLORED,

	/* Node in the explicit tree */
	AM_TELAMON_CANDIDATE_TYPE_INTERNAL_NODE,

	/* Node outside of the explicit tree generated by a random rollout */
	AM_TELAMON_CANDIDATE_TYPE_ROLLOUT_NODE
};

enum am_telamon_candidate_liveness {
	/* Candidate might be considered for exploration */
	AM_TELAMON_CANDIDATE_LIVENESS_ALIVE,

	/* Candidate has been marked dead for further exploration */
	AM_TELAMON_CANDIDATE_LIVENESS_DEADEND
};

struct am_telamon_candidate_classification {
	enum am_telamon_candidate_type type;
	enum am_telamon_candidate_liveness liveness;
	int is_implementation;
};

static inline int am_telamon_candidate_is_unknown_node(
	const struct am_telamon_candidate_classification* cls)
{
	return cls->type == AM_TELAMON_CANDIDATE_TYPE_UNKNOWN_NODE;
}

static inline int am_telamon_candidate_is_internal_node(
	const struct am_telamon_candidate_classification* cls)
{
	return cls->type == AM_TELAMON_CANDIDATE_TYPE_INTERNAL_NODE;
}

static inline int am_telamon_candidate_is_rollout_node(
	const struct am_telamon_candidate_classification* cls)
{
	return cls->type == AM_TELAMON_CANDIDATE_TYPE_ROLLOUT_NODE;
}

static inline int am_telamon_candidate_is_deadend(
	const struct am_telamon_candidate_classification* cls)
{
	return cls->liveness == AM_TELAMON_CANDIDATE_LIVENESS_DEADEND;
}

static inline int am_telamon_candidate_is_alive(
	const struct am_telamon_candidate_classification* cls)
{
	return cls->liveness == AM_TELAMON_CANDIDATE_LIVENESS_ALIVE;
}

static inline int am_telamon_candidate_is_implementation(
	const struct am_telamon_candidate_classification* cls)
{
	return cls->is_implementation;
}

/* Returns the parent of a candidate c. */
static inline struct am_telamon_candidate*
am_telamon_candidate_parent(const struct am_telamon_candidate* c)
{
	return c->parent;
}

/* Returns a pointer to the n-th child of c. The index n must be smaller than
 * the number of children of c. */
static inline struct am_telamon_candidate*
am_telamon_candidate_nth_child(const struct am_telamon_candidate* c, size_t n)
{
	return c->children[n];
}

/* Returns true if c has at least one child, otherwise false. */
static inline int
am_telamon_candidate_has_children(const struct am_telamon_candidate* c)
{
	return c->num_children > 0;
}

/* Returns true if child is the last child of c, otherwise false. */
static inline int
am_telamon_candidate_is_last_child(const struct am_telamon_candidate* c,
				   const struct am_telamon_candidate* child)
{
	return am_telamon_candidate_has_children(c) &&
		c->children[c->num_children-1] == child;
}

/* Returns true if child is the first child of c, otherwise false. */
static inline int
am_telamon_candidate_is_first_child(const struct am_telamon_candidate* c,
				    const struct am_telamon_candidate* child)
{
	return am_telamon_candidate_has_children(c) && c->children[0] == child;
}

/* Returns the index of a child in the list of children of a candidate c. The
 * child node must be a child of c, otherwise the function returns SIZE_MAX. */
static inline
size_t am_telamon_candidate_child_idx(const struct am_telamon_candidate* c,
				      const struct am_telamon_candidate* child)
{
	for(size_t i = 0; i < c->num_children; i++)
		if(c->children[i] == child)
			return i;

	return SIZE_MAX;
}

/* Returns the next sibling of a candidate c or NULL if c does not have a parent
 * or if c is the last child of its parent. */
static inline struct am_telamon_candidate*
am_telamon_candidate_get_next_sibling(const struct am_telamon_candidate* c)
{
	size_t idx;

	if(!c->parent || am_telamon_candidate_is_last_child(c->parent, c))
		return NULL;

	idx = am_telamon_candidate_child_idx(c->parent, c);

	return c->parent->children[idx+1];
}

/* Returns the previous sibling of a candidate c or NULL if c does not have a
 * parent or if c is the first child of its parent. */
static inline struct am_telamon_candidate*
am_telamon_candidate_get_prev_sibling(const struct am_telamon_candidate* c)
{
	size_t idx;

	if(!c->parent || am_telamon_candidate_is_first_child(c->parent, c))
		return NULL;

	idx = am_telamon_candidate_child_idx(c->parent, c);

	return c->parent->children[idx-1];
}

/* Internal callback function for am_dfs_norec_telamon_candidate_depth */
void am_telamon_depth_dfs_callback(const struct am_telamon_candidate* node,
				   size_t depth,
				   void* data);

/* Define an iterative depth-first search function to determine the depth of a
 * tree rooted at a candidate */
AM_DECL_DFS_FUNCTION(_telamon_candidate_depth,
		     const struct am_telamon_candidate,
		     size_t*,
		     am_telamon_candidate_parent,
		     am_telamon_candidate_nth_child,
		     am_telamon_candidate_is_last_child,
		     am_telamon_candidate_child_idx,
		     am_telamon_candidate_has_children,
		     am_telamon_depth_dfs_callback)

/* Returns the depth of the candidate tree rooted at n using an iterative
 * method. The root itself is at depth 1. */
static inline size_t
am_telamon_candidate_tree_depth(const struct am_telamon_candidate* n)
{
	size_t depth = 0;

	am_dfs_norec_telamon_candidate_depth(n, 20, &depth);

	return depth + 1;
}

void am_telamon_count_nodes_dfs_callback(const struct am_telamon_candidate* node,
					 size_t depth,
					 void* data);

/* Define an iterative depth-first search function to determine the number of
 * nodes of a tree rooted at a candidate */
AM_DECL_DFS_FUNCTION(_telamon_candidate_count_nodes,
		     const struct am_telamon_candidate,
		     size_t*,
		     am_telamon_candidate_parent,
		     am_telamon_candidate_nth_child,
		     am_telamon_candidate_is_last_child,
		     am_telamon_candidate_child_idx,
		     am_telamon_candidate_has_children,
		     am_telamon_count_nodes_dfs_callback)

/* Returns the number of nodes (including the root) of the candidate tree rooted
 * at n using an iterative method. */
static inline size_t
am_telamon_candidate_tree_count_nodes(const struct am_telamon_candidate* n)
{
	size_t num_nodes = 0;

	am_dfs_norec_telamon_candidate_count_nodes(n, 20, &num_nodes);

	return num_nodes;
}

/* Returns the classification of a candidate at time t (including t) */
static inline void
am_telamon_candidate_classify(const struct am_telamon_candidate* c,
			      am_timestamp_t t,
			      struct am_telamon_candidate_classification* cls)
{
	am_timestamp_t tmax = c->discovery_time;

	/* Default values */
	cls->type = AM_TELAMON_CANDIDATE_TYPE_UNKNOWN_NODE;
	cls->liveness = AM_TELAMON_CANDIDATE_LIVENESS_ALIVE;
	cls->is_implementation = 0;

	/* First determine whether this node is visible yet  */
	if(c->discovery_time <= t)
		cls->type = AM_TELAMON_CANDIDATE_TYPE_UNEXPLORED;

	/* Determine kind: internal / rollout / implementation */
	if(c->flags & AM_TELAMON_CANDIDATE_FLAG_ROLLOUT_NODE) {
		if(c->rollout_time <= t && c->rollout_time >= tmax) {
			cls->type = AM_TELAMON_CANDIDATE_TYPE_ROLLOUT_NODE;
			tmax = c->rollout_time;
		}
	}

	if(c->flags & AM_TELAMON_CANDIDATE_FLAG_INTERNAL_NODE) {
		if(c->internal_time <= t && c->internal_time >= tmax) {
			cls->type = AM_TELAMON_CANDIDATE_TYPE_INTERNAL_NODE;
			tmax = c->internal_time;
		}
	}

	if(c->flags & AM_TELAMON_CANDIDATE_FLAG_IMPLEMENTATION) {
		if(c->rollout_time <= t && c->implementation_time >= tmax)
			cls->is_implementation = 1;
	}

	/* Then check if this is also a deadend */
	if(c->flags & AM_TELAMON_CANDIDATE_FLAG_DEADEND) {
		if(c->deadend_time <= t)
			cls->liveness = AM_TELAMON_CANDIDATE_LIVENESS_DEADEND;
	}
}

/* Returns true if the value for the minimal bound of the performance model is
 * valid for c */
static inline int
am_telamon_candidate_perfmodel_bound_valid(const struct am_telamon_candidate* c)
{
	return c->flags & AM_TELAMON_CANDIDATE_FLAG_PERFMODEL_BOUND_VALID;
}

/* Returns the timestamp of the first encounter of a candidate */
static inline am_timestamp_t
am_telamon_candidate_first_encounter(const struct am_telamon_candidate* c)
{
	am_timestamp_t t = AM_TIMESTAMP_T_MAX;

	if(c->flags & AM_TELAMON_CANDIDATE_FLAG_ROLLOUT_NODE) {
		if(c->rollout_time < t)
			t = c->rollout_time;
	}

	if(c->flags & AM_TELAMON_CANDIDATE_FLAG_INTERNAL_NODE) {
		if(c->internal_time < t)
			t = c->internal_time;
	}

	if(c->flags & AM_TELAMON_CANDIDATE_FLAG_DEADEND) {
		if(c->deadend_time < t)
			t = c->deadend_time;
	}

	return t;
}

/* Comparison function comparing the performance model bounds of pointers to two
 * telamon candidates. Returns -1 if **pa has a lower bound than **pb, 1 if **pb
 * has a lower bound than **pa and 0 if both have the same bound. */
static inline int am_telamon_candidate_cmp_perfmodel_bound(
	struct am_telamon_candidate* const * pa,
	struct am_telamon_candidate* const * pb)
{
	const struct am_telamon_candidate* a = *pa;
	const struct am_telamon_candidate* b = *pb;

	return a->perfmodel_bound > b->perfmodel_bound ? 1 :
		(a->perfmodel_bound < b->perfmodel_bound ? -1 : 0);
}

/* Generate sorting function sorting an array of pointers to telamon
 * candidates ascending order of their value for the performane model bound */
AM_DECL_QSORT_SUFFIX(am_telamon_candidate_,
		     _perfmodel_bound_ascending,
		     struct am_telamon_candidate*,
		     am_telamon_candidate_cmp_perfmodel_bound)

#endif
