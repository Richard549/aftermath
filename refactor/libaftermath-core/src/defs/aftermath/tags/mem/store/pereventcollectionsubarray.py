# Author: Andi Drebes <andi@drebesium.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as published
# by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301,
# USA.

from aftermath.tags import FunctionTag, TemplatedGenerateFunctionTag
from aftermath.util import enforce_type
import aftermath

class DestroyAllArraysFunction(FunctionTag):
    """Iterates over all event collections and destroys all arrays which have
    the array ident of the type this tag is associated to, as well as their
    sub-arrays.
    """

    def __init__(self, function_name = None):
        super(DestroyAllArraysFunction, self).__init__(
            function_name = function_name,
            default_suffix = "_per_trace_array_destroy_all_arrays")

class GenerateDestroyAllArraysFunction(DestroyAllArraysFunction,
                                       TemplatedGenerateFunctionTag):
    """Generate a DestroyAllArraysFunction"""

    def __init__(self, function_name = None):
        DestroyAllArraysFunction.__init__(self, function_name = function_name)
        TemplatedGenerateFunctionTag.__init__(
            self, template_type = aftermath.templates.mem.store.pereventcollectionsubarray.DestroyAllArraysFunction)

class AppendFunction(FunctionTag):
    """Appends an instance of an in-memory type to the per-event-collection
    sub-array with the array ident of the type this tag is associated to and the
    numerical ID identifying the sub-array. If the array and / or sub-array does
    not exist, it is created.
    """

    def __init__(self, function_name = None):
        super(AppendFunction, self).__init__(
            function_name = function_name,
            default_suffix = "_per_event_collection_sub_array_append")

class AppendAndSetIndexFunction(FunctionTag):
    """Same as AppendFunction, but sets the field 'idx' of the added instance to
    the index within the sub-array it has been added to."""

    def __init__(self, function_name = None):
        super(AppendAndSetIndexFunction, self).__init__(
            function_name = function_name,
            default_suffix = "_per_event_collection_sub_array_append")

class BaseGenerateAppendFunction(TemplatedGenerateFunctionTag):
    """Same as AppendFunction, but sets the field 'idx' of the added instance to
    the index within the array it has been added to."""

    def __init__(self,
                 template_type,
                 sub_array_id_type,
                 event_collection_array_ident = None,
                 event_collection_array_struct_name = None,
                 event_array_ident = None,
                 event_array_struct_name = None):

        """`event_collection_id_dsk_field` is a Field of the on-disk type that
        contains the ID of the target event collection.

        `event_id_dsk_field` is the field of the on-disk data type that
        identifies the sub array.

        `event_collection_array_ident` is the string identifier of the array
        owned by the event collection (e.g., "am::generic::counter_event"). If
        not specified, it is set to the array identifier of the in-memory
        representationof the event.

        `event_collection_array_struct_name` is the name of the data structure
        representing the array owned by the event collection (e.g.,
        "am_counter_event_array_collection"). If not specified, this name is
        derived from the event array name by appending "_array".

        `event_array_struct_name` is the name of the data structure representing
        the array containing the events (e.g., "counter_event_array"). If not
        specified, this value is generated by adding the suffix "_array" to the
        name of the in-memory data structure.

        +--------------------+
        | Trace              |
        +--------------------+
        |                    |
        | Event collections  |---- [event_collection_id_dsk_field] --+
        |                    |                                       |
        |                    |                           +----------------------+
        |                    |                           | Event collection     |
        +--------------------+                           +----------------------+
                                                         |                      |
                 +-- [ event_collection_array_ident ] ---| Event arrays         |
                 |                                       |                      |
        +------------------------------------+           |                      |
        | event_collection_array_struct_name |           +----------------------+
        +------------------------------------+
        | ID 0                               |
        | ID 7                               |
        | ID 82                              |--- [ event_id_dsk_field ] --+
        | ID 104                             |                             |
        | ...                                |                             |
        +------------------------------------+                             |
                                                   +----------------------------+
                                                   | event_array_struct_name    |
                                                   +----------------------------+
                                                   | in-memory event type       |
                                                   | in-memory event type       |
                                                   | in-memory event type       |
                                                   | ...                        |
                                                   | in-memory event type       |
                              insert position ---> |                            |
                                                   +----------------------------+
        """

        TemplatedGenerateFunctionTag.__init__(
            self,
            template_type = template_type)

        self.__sub_array_id_type = sub_array_id_type
        self.__event_collection_array_ident = event_collection_array_ident
        self.__event_collection_array_struct_name = event_collection_array_struct_name
        self.__event_array_struct_name = event_array_struct_name
        self.__event_array_ident = event_array_ident

    def getEventCollectionArrayIdent(self):
        return self.__event_collection_array_ident

    def getEventCollectionArrayStructName(self):
        return self.__event_collection_array_struct_name

    def getEventArrayStructName(self):
        return self.__event_array_struct_name

    def getSubArrayIDType(self):
        return self.__sub_array_id_type

    def getEventArrayIdent(self):
        return self.__event_array_ident

class GenerateAppendFunction(BaseGenerateAppendFunction, AppendFunction):
    """Generate an AppendFunction"""

    def __init__(self,
                 sub_array_id_type,
                 event_collection_array_ident = None,
                 event_collection_array_struct_name = None,
                 event_array_ident = None,
                 event_array_struct_name = None,
                 function_name = None):
        """See BaseGenerateAppendFunction.__init__"""

        AppendFunction.__init__(self, function_name = function_name)

        BaseGenerateAppendFunction.__init__(
            self,
            template_type = aftermath.templates.mem.store.pereventcollectionsubarray.AppendFunction,
            sub_array_id_type = sub_array_id_type,
            event_collection_array_ident = event_collection_array_ident,
            event_collection_array_struct_name = event_collection_array_struct_name,
            event_array_ident = event_array_ident,
            event_array_struct_name = event_array_struct_name)

class GenerateAppendAndSetIndexFunction(BaseGenerateAppendFunction,
                                        AppendAndSetIndexFunction):
    """Generate an AppendFunction"""

    def __init__(self,
                 sub_array_id_type,
                 event_collection_array_ident = None,
                 event_collection_array_struct_name = None,
                 event_array_ident = None,
                 event_array_struct_name = None,
                 function_name = None):
        """See BaseGenerateAppendFunction.__init__"""

        AppendAndSetIndexFunction.__init__(self, function_name = function_name)

        BaseGenerateAppendFunction.__init__(
            self,
            template_type = aftermath.templates.mem.store.pereventcollectionsubarray.AppendFunction,
            sub_array_id_type = sub_array_id_type,
            event_collection_array_ident = event_collection_array_ident,
            event_collection_array_struct_name = event_collection_array_struct_name,
            event_array_ident = event_array_ident,
            event_array_struct_name = event_array_struct_name)
